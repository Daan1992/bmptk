Archive member included because of file (symbol)

c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)
                              main.o (__aeabi_uidiv)
c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_dvmd_tls.o)
                              c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o) (__aeabi_idiv0)

Allocating common symbols
Common symbol       size              file

__dso_handle        0x4               cortex_startup.o

Discarded input sections

 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .group         0x00000000        0x8 main.o
 .text          0x00000000        0x0 main.o
 .data          0x00000000        0x0 main.o
 .bss           0x00000000        0x0 main.o
 .text          0x00000000        0x0 cortex_startup.o
 .data          0x00000000        0x0 cortex_startup.o
 .bss           0x00000000        0x0 cortex_startup.o
 COMMON         0x00000000        0x4 cortex_startup.o
 .data          0x00000000        0x0 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)
 .bss           0x00000000        0x0 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)
 .data          0x00000000        0x0 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_dvmd_tls.o)
 .bss           0x00000000        0x0 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_dvmd_tls.o)

Memory Configuration

Name             Origin             Length             Attributes
rom              0x00000000         0x00008000         xr
ram              0x10000000         0x00001000         xrw
nul              0x20000000         0x00000000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD main.o
LOAD cortex_startup.o
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/../../../../arm-none-eabi/lib/armv6-m\libstdc++.a
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/../../../../arm-none-eabi/lib/armv6-m\libm.a
START GROUP
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/../../../../arm-none-eabi/lib/armv6-m\libc.a
END GROUP
                0x00000400                __main_stack_size = 0x400
                0x00000000                __process_stack_size = 0x0
                [0x00000400]                PROVIDE (__main_stack_size, __main_stack_size)
                [0x00000000]                PROVIDE (__process_stack_size, __process_stack_size)
                0x00000000                __rom_start = ORIGIN (rom)
                0x00008000                __rom_size = 0x8000
                0x00008000                __rom_end = (__rom_start + __rom_size)
                0x10000000                __ram_start = ORIGIN (ram)
                0x00001000                __ram_size = 0x1000
                0x10001000                __ram_end = (__ram_start + __ram_size)
                [0x00000000]                PROVIDE (__rom_start, __rom_start)
                [0x00008000]                PROVIDE (__rom_size, __rom_size)
                [0x00008000]                PROVIDE (__rom_end, __rom_end)
                [0x10000000]                PROVIDE (__ram_start, __ram_start)
                [0x00001000]                PROVIDE (__ram_size, __ram_size)
                [0x10001000]                PROVIDE (__ram_end, __ram_end)

.text           0x00000000      0x568
                0x00000000                . = ALIGN (0x4)
                0x00000000                __text_start = .
                [0x00000000]                PROVIDE (__text_start, __text_start)
                0x00000000                . = ALIGN (0x4)
 *(.vectors)
 .vectors       0x00000000       0x20 cortex_startup.o
                0x00000000                __vectors
                0x00000020                . = ALIGN (0x4)
 *(.text .text.* .gnu.linkonce.t.*)
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE4uartILj38400EE3putEc
                0x00000020       0x10 main.o
                0x00000020                hwcpp::lpc1114_base<4096, 32768, 48000000>::uart<38400u>::put(char)
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE16initialize_clockEv.part.5
                0x00000030       0x44 main.o
 .text._ZNSt7ostream6fillerEi
                0x00000074       0x1a main.o
                0x00000074                std::ostream::filler(int)
 *fill*         0x0000008e        0x2 
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE4uartILj38400EE4initEv
                0x00000090       0xb8 main.o
                0x00000090                hwcpp::lpc1114_base<4096, 32768, 48000000>::uart<38400u>::init()
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_644initEv
                0x00000148       0x2c main.o
                0x00000148                hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64::init()
 *fill*         0x00000174        0x4 
 .text._ZN5hwcpp13timing_waiterINS_12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_64EE3nowEv
                0x00000178       0x50 main.o
                0x00000178                hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64>::now()
 .text._ZN5hwcpp13timing_waiterINS_12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_64EE4waitENS_15moment_durationIxLx24EE8durationE
                0x000001c8       0x2a main.o
                0x000001c8                hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64>::wait(hwcpp::moment_duration<long long, 24ll>::duration)
 *fill*         0x000001f2        0x2 
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EE3setEb
                0x000001f4       0x24 main.o
                0x000001f4                hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>::set(bool)
 .text._ZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi5EE3setEb
                0x00000218       0x24 main.o
                0x00000218                hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>::set(bool)
 .text._ZN5hwcpp25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS3_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS2_8timer_64EEEE3kHzILy100EEEE4initEv
                0x0000023c       0x5c main.o
                0x0000023c                hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >::init()
 .text._ZN5hwcpp20add_timing_templatesINS_13timing_waiterINS_12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_64EEEE2nsILy5050ELy9223372036854775807EE4waitEv
                0x00000298        0xc main.o
                0x00000298                hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::ns<5050ull, 9223372036854775807ull>::wait()
 .text._ZN5hwcpp25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS3_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS2_8timer_64EEEE3kHzILy100EEEE10write_byteEh
                0x000002a4       0x2c main.o
                0x000002a4                hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >::write_byte(unsigned char)
 .text._ZN5hwcpp25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS3_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS2_8timer_64EEEE3kHzILy100EEEE8read_bitEv
                0x000002d0       0x30 main.o
                0x000002d0                hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >::read_bit()
 .text._ZN5hwcpp25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS3_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS2_8timer_64EEEE3kHzILy100EEEE5writeEhPKhi
                0x00000300       0x68 main.o
                0x00000300                hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >::write(unsigned char, unsigned char const*, int)
 .text._ZN5hwcpp4kittINS_6invertINS_8pcf8574aINS_25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS6_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS5_8timer_64EEEE3kHzILy100EEEEELi0EEEvEENS_21timing_implementationISB_EEEEvNT0_8durationE
                0x00000368       0x5c main.o
                0x00000368                void hwcpp::kitt<hwcpp::invert<hwcpp::pcf8574a<hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >, 0>, void>, hwcpp::timing_implementation<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >(hwcpp::timing_implementation<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64>::duration)
 *fill*         0x000003c4        0x4 
 .text.startup.main
                0x000003c8       0x80 main.o
                0x000003c8                main
 .text.__startup
                0x00000448       0x54 cortex_startup.o
                0x00000448                __startup
 .text          0x0000049c       0x9c c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)
                0x0000049c                __aeabi_uidiv
                0x0000049c                __udivsi3
                0x00000524                __aeabi_uidivmod
 .text          0x00000538        0x4 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_dvmd_tls.o)
                0x00000538                __aeabi_idiv0
                0x00000538                __aeabi_ldiv0
                0x0000053c                . = ALIGN (0x4)
 *(.glue_7t .glue_7)
 .glue_7        0x00000000        0x0 linker stubs
 .glue_7t       0x00000000        0x0 linker stubs
                0x0000053c                . = ALIGN (0x4)
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata.str1.1
                0x0000053c       0x2a main.o
                0x00000568                . = ALIGN (0x4)
 *fill*         0x00000566        0x2 
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x00000568                . = ALIGN (0x4)
 *(.gcc_except_table)
                0x00000568                . = ALIGN (0x4)
 *(.eh_frame_hdr)
                0x00000568                . = ALIGN (0x4)
 *(.eh_frame)
                0x00000568                . = ALIGN (0x4)
                0x00000568                __text_end = .
                [0x00000568]                PROVIDE (__text_end, __text_end)

.vfp11_veneer   0x00000568        0x0
 .vfp11_veneer  0x00000000        0x0 linker stubs

.v4_bx          0x00000568        0x0
 .v4_bx         0x00000000        0x0 linker stubs

.iplt           0x00000568        0x0
 .iplt          0x00000000        0x0 main.o

.rel.dyn        0x00000568        0x0
 .rel.iplt      0x00000000        0x0 main.o

.IF_YOU_SEE_THIS_YOU_HAVE_ONE_OR_MORE_GLOBAL_OBJECT_CONSTRUCTORS
 *(.init)
 *(.preinit_array)
 *(SORT(.init_array.*))
 *(.init_array)
                0x00000568                . = ALIGN (0x4)
                0x00000568                __exidx_start = .
                [0x00000568]                PROVIDE (__exidx_start, __exidx_start)

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x00000568                . = ALIGN (0x4)
                0x00000568                __exidx_end = .
                [0x00000568]                PROVIDE (__exidx_end, __exidx_end)

.data           0x10000000       0x14 load address 0x00000568
                0x10000000                . = ALIGN (0x4)
                0x00000568                __data_init_start = LOADADDR (.data)
                [0x00000568]                PROVIDE (__data_init_start, __data_init_start)
                0x10000000                __data_start = .
                [0x10000000]                PROVIDE (__data_start, __data_start)
                0x10000000                . = ALIGN (0x4)
 *(.data .data.* .gnu.linkonce.d.*)
 .data._ZSt4cout
                0x10000000       0x14 main.o
                0x10000000                std::cout
                0x10000014                . = ALIGN (0x4)
                0x10000014                __data_end = .
                [0x10000014]                PROVIDE (__data_end, __data_end)

.igot.plt       0x10000014        0x0 load address 0x0000057c
 .igot.plt      0x00000000        0x0 main.o

.bss            0x10000018       0x10
                0x10000018                . = ALIGN (0x4)
                0x10000018                __bss_start = .
                [0x10000018]                PROVIDE (__bss_start, __bss_start)
                0x10000018                . = ALIGN (0x4)
 *(.bss .bss.* .gnu.linkonce.b.*)
 .bss._ZZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_643nowEvE4high
                0x10000018        0x8 main.o
                0x10000018                hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64::now()::high
 .bss._ZZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE8timer_643nowEvE8last_low
                0x10000020        0x4 main.o
                0x10000020                hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64::now()::last_low
 .bss._ZZN5hwcpp12lpc1114_baseILi4096ELi32768ELi48000000EE16initialize_clockEvE4done
                0x10000024        0x1 main.o
                0x10000024                hwcpp::lpc1114_base<4096, 32768, 48000000>::initialize_clock()::done
 .bss._ZN5hwcpp8pcf8574xINS_25i2c_bus_master_bb_scl_sdaINS_12lpc1114_baseILi4096ELi32768ELi48000000EE6pin_ocILi0ELi4EEENS4_ILi0ELi5EEENS_20add_timing_templatesINS_13timing_waiterINS3_8timer_64EEEE3kHzILy100EEEEELi56ELi0EE6bufferE
                0x10000025        0x1 main.o
                0x10000025                hwcpp::pcf8574x<hwcpp::i2c_bus_master_bb_scl_sda<hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 4>, hwcpp::lpc1114_base<4096, 32768, 48000000>::pin_oc<0, 5>, hwcpp::add_timing_templates<hwcpp::timing_waiter<hwcpp::lpc1114_base<4096, 32768, 48000000>::timer_64> >::kHz<100ull> >, 56, 0>::buffer
                0x10000028                . = ALIGN (0x4)
 *fill*         0x10000026        0x2 
 *(COMMON)
                0x10000028                . = ALIGN (0x4)
                0x10000028                __bss_end = .
                [0x10000028]                PROVIDE (__bss_end, __bss_end)

.stack          0x10000028      0x400
                0x10000028                . = ALIGN (0x8)
                0x10000028                __stack_start = .
                [0x10000028]                PROVIDE (__stack_start, __stack_start)
                0x10000028                . = ALIGN (0x8)
                0x10000028                __main_stack_start = .
                [0x10000028]                PROVIDE (__main_stack_start, __main_stack_start)
                0x10000428                . = (. + __main_stack_size)
 *fill*         0x10000028      0x400 
                0x10000428                . = ALIGN (0x8)
                0x10000428                __main_stack_end = .
                [0x10000428]                PROVIDE (__main_stack_end, __main_stack_end)
                0x10000428                . = ALIGN (0x8)
                0x10000428                __process_stack_start = .
                [0x10000428]                PROVIDE (__process_stack_start, __process_stack_start)
                0x10000428                . = (. + __process_stack_size)
                0x10000428                . = ALIGN (0x8)
                0x10000428                __process_stack_end = .
                [0x10000428]                PROVIDE (__process_stack_end, __process_stack_end)
                0x10000428                . = ALIGN (0x8)
                0x10000428                __stack_end = .
                [0x10000428]                PROVIDE (__stack_end, __stack_end)
                0x10000428                . = ALIGN (0x4)
                0x10000428                __heap_start = .
                [0x10000428]                PROVIDE (__heap_start, __heap_start)
                0x10000428                . = ALIGN (0x4)
                0x10001000                __heap_end = __ram_end
                [0x10001000]                PROVIDE (__heap_end, __heap_end)

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame    0x00000000       0x20
 *(.debug_frame)
 .debug_frame   0x00000000       0x20 c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)

.comment        0x00000000       0x70
 .comment       0x00000000       0x70 main.o
                                 0x71 (size before relaxing)
 .comment       0x00000000       0x71 cortex_startup.o

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.note.gnu.arm.ident
 *(.note.gnu.arm.ident)

.ARM.attributes
                0x00000000       0x31
 *(.ARM.attributes)
 .ARM.attributes
                0x00000000       0x31 main.o
 .ARM.attributes
                0x00000031       0x31 cortex_startup.o
 .ARM.attributes
                0x00000062       0x1e c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_udivsi3.o)
 .ARM.attributes
                0x00000080       0x1e c:/program files (x86)/gnu tools arm embedded/4.8 2013q4/bin/../lib/gcc/arm-none-eabi/4.8.3/armv6-m\libgcc.a(_dvmd_tls.o)

/DISCARD/
 *(.note.GNU-stack)
                0x00000568                PROVIDE (__text_size, (__text_end - __text_start))
                0x00000000                PROVIDE (__exidx_size, (__exidx_end - __exidx_start))
                0x00000014                PROVIDE (__data_size, (__data_end - __data_start))
                0x00000010                PROVIDE (__bss_size, (__bss_end - __bss_start))
                0x00000400                PROVIDE (__stack_size, (__stack_end - __stack_start))
                0x00000bd8                PROVIDE (__heap_size, (__heap_end - __heap_start))
OUTPUT(main.elf elf32-littlearm)
