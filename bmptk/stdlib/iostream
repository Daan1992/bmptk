// ==========================================================================
//                                                                           
// file: bmptk/stdlib/iostream     
//
// This file (and iostream.cpp) attempts to provide facilities of the 
// standard iostream in a ROM and RAM effective way.
//                                                                           
// ==========================================================================

#ifndef _BMPTK_IOSTREAM_H
#define _BMPTK_IOSTREAM_H

#include "bmptk.h"
#include <bits/postypes.h>

namespace std {

   class ios {
   };
   
   class streambuf {
   }; 
   
   class ostream {
   private:
      int field_width;
      int numerical_radix;
      char fill_char;
      char hex_base;
      bool align_right;
      bool show_pos;
      bool bool_alpha;
      bool show_base;
               
   public:
      ostream( streambuf * buf );
      
	  constexpr ostream(): 
         field_width( 0 ), 
         numerical_radix( 10 ),
         fill_char( ' ' ), 
         hex_base( 'A' ),
         align_right( true ), 
         show_pos( false ),
         bool_alpha( false ),
         show_base( false )
      {}
      
      virtual void putc( char c ) = 0;
      virtual void flush( void ){}
      ostream & operator<< ( char c ){ putc( c ); return *this; }
      
      int width( void ) const { return field_width; }
      void width( int x ) { field_width = x; }
      
      int base( void ) const { return numerical_radix; }
      void base( int x ) { numerical_radix = x; }
      
      bool showpos( void ) const { return show_pos; }
      void showpos( bool x ) { show_pos = x; }
      
      bool boolalpha( void ) const { return bool_alpha; }
      void boolalpha( bool x ) { bool_alpha = x; }
      
      char fill( void ) const { return fill_char; }
      void fill( char x ){ fill_char = x; }
      
      bool showbase( void ) const { return show_base; }
      void showbase( bool x ){ show_base = x; }
      
      void right( void ){ align_right = true; }      
      void left( void ){ align_right = false; }     
      bool must_align_right( void ){ return align_right; }
      
      void filler( int n );
      const char *prefix( void );
      void digit( char c );
   };   
      
         
   class setw {
   public:
      constexpr setw( int x ) : x( x ){}
          int x;
   };
         
   class setbase {
   public:
      constexpr setbase( int x ) : x( x ){}
      int x;
   };
   
   const setbase bin( 2 );
   const setbase oct( 8 );
   const setbase dec( 10 );
   const setbase hex( 16 );
   
   class _showpos {
   public:
      constexpr _showpos( bool x ) : x( x ){}
      bool x;
   };
           
   const _showpos showpos( true );
   const _showpos noshowpos( false );
   
   class _showbase {
   public:
      constexpr _showbase( bool x ) : x( x ){}
      bool x;
   };
           
   const _showbase showbase( true );
   const _showbase noshowbase( false );
   
   class _boolalpha {
   public:
      constexpr _boolalpha( bool x ) : x( x ){}
      bool x;
   };
           
   const _boolalpha boolalpha( true );
   const _boolalpha noboolalpha( false );
   
   class setfill {
   public:
      constexpr setfill( char x ) : x( x ){}
      char x;
   };
           
   class _right {
   public: 
      constexpr _right( void ){}
   }; 
           
   const _right right;
   
   class _left {
   public: 
      constexpr _left( void ){}
   }; 
                 
   const _left left;
            
   class _flush {
   public: 
      constexpr _flush( void ){}
   }; 
           
   const _flush flush;
            
   class bmptk_ostream_putc : public ostream {   
   private:
	  
	  bmptk::output_channel_polled< char > **channel;
      
   public:
      constexpr bmptk_ostream_putc(
	     bmptk::output_channel_polled< char > **channel
	  ) : channel( channel ){}
         
      void putc( char c ){ 
	     if( *channel ){
		    (*channel)->put( c );
         }			
      }
      
      void use( bmptk::output_channel_polled< char > &ch ){ *channel = &ch; }
      
   };
   
   extern bmptk_ostream_putc cout;
   
   ostream & operator<< ( ostream & stream, const setw & x );
   ostream & operator<< ( ostream & stream, const setbase & x );
   ostream & operator<< ( ostream & stream, const _showpos & x );
   ostream & operator<< ( ostream & stream, const _boolalpha & x );
   ostream & operator<< ( ostream & stream, const _showbase & x );
   ostream & operator<< ( ostream & stream, const setfill x );
   ostream & operator<< ( ostream & stream, const _right x );
   ostream & operator<< ( ostream & stream, const _left x );
   
   ostream & operator<< ( ostream & stream, bool x );
   ostream & operator<< ( ostream & stream, const char *s );
   ostream & operator<< ( ostream & stream, signed char c );
   ostream & operator<< ( ostream & stream, unsigned char c );
   ostream & operator<< ( ostream & stream, int x );
   ostream & operator<< ( ostream & stream, long int x );
   ostream & operator<< ( ostream & stream, long long int x );
   ostream & operator<< ( ostream & stream, unsigned int x );
   ostream & operator<< ( ostream & stream, unsigned long int x );
   ostream & operator<< ( ostream & stream, unsigned long long int x );

   const char endl = '\n';
   const char ends = '\0';
};




#endif // #ifdef BMPTK_IOSTREAM_H