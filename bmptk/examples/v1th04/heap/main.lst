	.cpu cortex-m0
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 4
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.code	16
	.file	"main.c"
	.section	.text.print_memmap_line,"ax",%progbits
	.align	1
	.global	print_memmap_line
	.code	16
	.thumb_func
	.type	print_memmap_line, %function
print_memmap_line:
	push	{r3, r4, r5, lr}
	mov	r4, r1
	mov	r5, r2
	bl	uart_put_string
	mov	r0, r4
	mov	r1, #8
	bl	uart_put_int_hexadecimal
	cmp	r5, #0
	beq	.L2
	ldr	r0, .L7
	bl	uart_put_string
	mov	r0, r4
	bl	uart_put_int_decimal
	ldr	r0, .L7+4
	bl	uart_put_string
.L2:
	ldr	r0, .L7+8
	bl	uart_put_string
	@ sp needed
	pop	{r3, r4, r5, pc}
.L8:
	.align	2
.L7:
	.word	.LC0
	.word	.LC2
	.word	.LC4
	.size	print_memmap_line, .-print_memmap_line
	.section	.text.print_allocate,"ax",%progbits
	.align	1
	.global	print_allocate
	.code	16
	.thumb_func
	.type	print_allocate, %function
print_allocate:
	push	{r3, r4, r5, lr}
	mov	r4, r0
	ldr	r0, .L12
	bl	uart_put_string
	mov	r0, r4
	bl	uart_put_int_decimal
	mov	r0, r4
	bl	malloc
	mov	r5, r0
	ldr	r0, .L12+4
	bl	uart_put_string
	mov	r0, r5
	mov	r1, #8
	bl	uart_put_int_hexadecimal
	cmp	r5, #0
	bne	.L10
	ldr	r0, .L12+8
	bl	uart_put_string
	b	.L11
.L10:
	ldr	r0, .L12+12
	bl	uart_put_string
	ldr	r3, .L12+16
	ldr	r2, [r3]
	add	r0, r4, r2
	str	r0, [r3]
	bl	uart_put_int_decimal
.L11:
	ldr	r0, .L12+20
	bl	uart_put_string
	@ sp needed
	pop	{r3, r4, r5, pc}
.L13:
	.align	2
.L12:
	.word	.LC6
	.word	.LC8
	.word	.LC10
	.word	.LC12
	.word	.LANCHOR0
	.word	.LC4
	.size	print_allocate, .-print_allocate
	.section	.text.memmap_print,"ax",%progbits
	.align	1
	.global	memmap_print
	.code	16
	.thumb_func
	.type	memmap_print, %function
memmap_print:
	push	{r3, r4, r5, lr}
	ldr	r0, .L15
	bl	uart_put_string
	ldr	r0, .L15+4
	ldr	r1, .L15+8
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+12
	ldr	r1, .L15+16
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+20
	mov	r2, #1
	ldr	r0, .L15+24
	bl	print_memmap_line
	ldr	r4, .L15+28
	@ sp needed
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+32
	ldr	r1, .L15+36
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+40
	ldr	r1, .L15+44
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+48
	mov	r2, #1
	ldr	r0, .L15+52
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+56
	bl	uart_put_string
	ldr	r0, .L15+60
	ldr	r1, .L15+64
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+68
	ldr	r1, .L15+72
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+76
	mov	r2, #1
	ldr	r0, .L15+80
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+84
	ldr	r1, .L15+88
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+92
	ldr	r1, .L15+96
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+100
	mov	r2, #1
	ldr	r0, .L15+104
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+108
	ldr	r1, .L15+112
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+116
	ldr	r1, .L15+120
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+124
	mov	r2, #1
	ldr	r0, .L15+128
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+132
	ldr	r1, .L15+136
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+140
	ldr	r1, .L15+144
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+148
	mov	r2, #1
	ldr	r0, .L15+152
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+156
	ldr	r1, .L15+160
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+164
	ldr	r1, .L15+168
	mov	r2, #0
	bl	print_memmap_line
	ldr	r1, .L15+172
	mov	r2, #1
	ldr	r0, .L15+176
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	ldr	r0, .L15+180
	ldr	r1, .L15+184
	mov	r2, #0
	bl	print_memmap_line
	ldr	r0, .L15+188
	ldr	r1, .L15+192
	mov	r2, #0
	bl	print_memmap_line
	ldr	r5, .L15+196
	mov	r2, #1
	mov	r1, r5
	ldr	r0, .L15+200
	bl	print_memmap_line
	mov	r0, r4
	bl	uart_put_string
	mov	r0, r5
	sub	r0, r0, #9
	bl	print_allocate
	mov	r0, #3
	bl	print_allocate
	mov	r0, #1
	bl	print_allocate
	mov	r0, #1
	bl	print_allocate
	pop	{r3, r4, r5, pc}
.L16:
	.align	2
.L15:
	.word	.LC16
	.word	.LC18
	.word	__rom_start
	.word	.LC21
	.word	__rom_end
	.word	__rom_size
	.word	.LC24
	.word	.LC4
	.word	.LC28
	.word	__ram_start
	.word	.LC31
	.word	__ram_end
	.word	__ram_size
	.word	.LC34
	.word	.LC37
	.word	.LC39
	.word	__text_start
	.word	.LC42
	.word	__text_end
	.word	__text_size
	.word	.LC45
	.word	.LC48
	.word	__data_init_start
	.word	.LC51
	.word	__data_init_end
	.word	__data_init_size
	.word	.LC54
	.word	.LC57
	.word	__data_start
	.word	.LC60
	.word	__data_end
	.word	__data_size
	.word	.LC63
	.word	.LC66
	.word	__bss_start
	.word	.LC69
	.word	__bss_end
	.word	__bss_size
	.word	.LC72
	.word	.LC75
	.word	__stack_start
	.word	.LC78
	.word	__stack_end
	.word	__stack_size
	.word	.LC81
	.word	.LC84
	.word	__heap_start
	.word	.LC87
	.word	__heap_end
	.word	__heap_size
	.word	.LC90
	.size	memmap_print, .-memmap_print
	.section	.text.startup.main,"ax",%progbits
	.align	1
	.global	main
	.code	16
	.thumb_func
	.type	main, %function
main:
	push	{r3, lr}
	bl	timer_init
	bl	uart_init
	ldr	r0, .L19
	bl	uart_put_string
	mov	r3, #10
	ldr	r0, .L19+4
	strb	r3, [r0]
	mov	r3, #0
	strb	r3, [r0, #1]
	bl	uart_put_string
	bl	memmap_print
.L18:
	b	.L18
.L20:
	.align	2
.L19:
	.word	.LANCHOR1
	.word	s
	.size	main, .-main
	.comm	s,67,1
	.global	title
	.global	total
	.section	.data.title,"aw",%progbits
	.set	.LANCHOR1,. + 0
	.type	title, %object
	.size	title, 17
title:
	.ascii	"memory map test\012\000"
	.section	.rodata.str1.1,"aMS",%progbits,1
.LC0:
	.ascii	" (\000"
.LC2:
	.ascii	") \000"
.LC4:
	.ascii	"\012\000"
.LC6:
	.ascii	"   allocate \000"
.LC8:
	.ascii	" p=\000"
.LC10:
	.ascii	" failed\000"
.LC12:
	.ascii	" OK total = \000"
.LC16:
	.ascii	"Chip\012\000"
.LC18:
	.ascii	"   ROM start         : \000"
.LC21:
	.ascii	"   ROM end           : \000"
.LC24:
	.ascii	"   ROM size          : \000"
.LC28:
	.ascii	"   RAM start         : \000"
.LC31:
	.ascii	"   RAM end           : \000"
.LC34:
	.ascii	"   RAM size          : \000"
.LC37:
	.ascii	"Application\012\000"
.LC39:
	.ascii	"   TEXT start        : \000"
.LC42:
	.ascii	"   TEXT end          : \000"
.LC45:
	.ascii	"   TEXT size         : \000"
.LC48:
	.ascii	"   DATA (ROM) start  : \000"
.LC51:
	.ascii	"   DATA (ROM) end    : \000"
.LC54:
	.ascii	"   DATA (ROM) size   : \000"
.LC57:
	.ascii	"   DATA (RAM) start  : \000"
.LC60:
	.ascii	"   DATA (RAM) end    : \000"
.LC63:
	.ascii	"   DATA (RAM) size   : \000"
.LC66:
	.ascii	"   BSS start         : \000"
.LC69:
	.ascii	"   BSS end           : \000"
.LC72:
	.ascii	"   BSS size          : \000"
.LC75:
	.ascii	"   STACK bottom      : \000"
.LC78:
	.ascii	"   STACK top         : \000"
.LC81:
	.ascii	"   STACK size        : \000"
.LC84:
	.ascii	"   HEAP bottom       : \000"
.LC87:
	.ascii	"   HEAP top          : \000"
.LC90:
	.ascii	"   HEAP size         : \000"
	.section	.bss.total,"aw",%nobits
	.align	2
	.set	.LANCHOR0,. + 0
	.type	total, %object
	.size	total, 4
total:
	.space	4
	.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20141119 (release) [ARM/embedded-4_9-branch revision 218278]"
